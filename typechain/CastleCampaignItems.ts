/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CastleCampaignItemsInterface extends ethers.utils.Interface {
  functions: {
    "iceLance()": FunctionFragment;
    "scrollOfProtection()": FunctionFragment;
    "scrollOfSpellpower()": FunctionFragment;
    "scrollOfStrength()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "iceLance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "scrollOfProtection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scrollOfSpellpower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scrollOfStrength",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "iceLance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scrollOfProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scrollOfSpellpower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scrollOfStrength",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CastleCampaignItems extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CastleCampaignItemsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    iceLance(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfProtection(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfSpellpower(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfStrength(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;
  };

  iceLance(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  scrollOfProtection(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  scrollOfSpellpower(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  scrollOfStrength(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  callStatic: {
    iceLance(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfProtection(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfSpellpower(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfStrength(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    iceLance(overrides?: CallOverrides): Promise<BigNumber>;

    scrollOfProtection(overrides?: CallOverrides): Promise<BigNumber>;

    scrollOfSpellpower(overrides?: CallOverrides): Promise<BigNumber>;

    scrollOfStrength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    iceLance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scrollOfProtection(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scrollOfSpellpower(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scrollOfStrength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
