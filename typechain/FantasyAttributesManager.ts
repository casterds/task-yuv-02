/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type AbilityStruct = {
  abilityType: BigNumberish;
  action: BigNumberish;
  name: string;
};

export type AbilityStructOutput = [number, number, string] & {
  abilityType: number;
  action: number;
  name: string;
};

export type CharacterAttributesStruct = {
  experience: BigNumberish;
  health: BigNumberish;
  strength: BigNumberish;
  armor: BigNumberish;
  physicalblock: BigNumberish;
  agility: BigNumberish;
  spellpower: BigNumberish;
  spellresistance: BigNumberish;
  healingpower: BigNumberish;
  class: BigNumberish;
  abilities: AbilityStruct[];
};

export type CharacterAttributesStructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  AbilityStructOutput[]
] & {
  experience: BigNumber;
  health: number;
  strength: number;
  armor: number;
  physicalblock: number;
  agility: number;
  spellpower: number;
  spellresistance: number;
  healingpower: number;
  class: number;
  abilities: AbilityStructOutput[];
};

export interface FantasyAttributesManagerInterface
  extends ethers.utils.Interface {
  functions: {
    "getLevel(uint256)": FunctionFragment;
    "getPlayer(uint256)": FunctionFragment;
    "getPlayerAbilities(uint256)": FunctionFragment;
    "getPlayerAbility(uint256,uint256)": FunctionFragment;
    "getStartingAttrtibutes(uint8)": FunctionFragment;
    "registerNewCharacter(uint256,uint8)": FunctionFragment;
    "s_CharacterAttributes(uint256)": FunctionFragment;
    "s_StartingAttributes(uint8)": FunctionFragment;
    "s_fantasyCharacters()": FunctionFragment;
    "s_fantasyCharactersAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerAbilities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerAbility",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartingAttrtibutes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNewCharacter",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_CharacterAttributes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_StartingAttributes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_fantasyCharacters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_fantasyCharactersAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getLevel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerAbilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartingAttrtibutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNewCharacter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_CharacterAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_StartingAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_fantasyCharacters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_fantasyCharactersAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FantasyAttributesManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FantasyAttributesManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLevel(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayer(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CharacterAttributesStructOutput]>;

    getPlayerAbilities(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[AbilityStructOutput[]]>;

    getPlayerAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[AbilityStructOutput]>;

    getStartingAttrtibutes(
      _charClass: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CharacterAttributesStructOutput]>;

    registerNewCharacter(
      _tokenId: BigNumberish,
      _charClass: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_CharacterAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        experience: BigNumber;
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        class: number;
      }
    >;

    s_StartingAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        experience: BigNumber;
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        class: number;
      }
    >;

    s_fantasyCharacters(overrides?: CallOverrides): Promise<[string]>;

    s_fantasyCharactersAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  getLevel(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayer(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CharacterAttributesStructOutput>;

  getPlayerAbilities(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<AbilityStructOutput[]>;

  getPlayerAbility(
    _tokenId: BigNumberish,
    _abilityIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<AbilityStructOutput>;

  getStartingAttrtibutes(
    _charClass: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CharacterAttributesStructOutput>;

  registerNewCharacter(
    _tokenId: BigNumberish,
    _charClass: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_CharacterAttributes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ] & {
      experience: BigNumber;
      health: number;
      strength: number;
      armor: number;
      physicalblock: number;
      agility: number;
      spellpower: number;
      spellresistance: number;
      healingpower: number;
      class: number;
    }
  >;

  s_StartingAttributes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ] & {
      experience: BigNumber;
      health: number;
      strength: number;
      armor: number;
      physicalblock: number;
      agility: number;
      spellpower: number;
      spellresistance: number;
      healingpower: number;
      class: number;
    }
  >;

  s_fantasyCharacters(overrides?: CallOverrides): Promise<string>;

  s_fantasyCharactersAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getLevel(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayer(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CharacterAttributesStructOutput>;

    getPlayerAbilities(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<AbilityStructOutput[]>;

    getPlayerAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<AbilityStructOutput>;

    getStartingAttrtibutes(
      _charClass: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CharacterAttributesStructOutput>;

    registerNewCharacter(
      _tokenId: BigNumberish,
      _charClass: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    s_CharacterAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        experience: BigNumber;
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        class: number;
      }
    >;

    s_StartingAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        experience: BigNumber;
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        class: number;
      }
    >;

    s_fantasyCharacters(overrides?: CallOverrides): Promise<string>;

    s_fantasyCharactersAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getLevel(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayer(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerAbilities(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStartingAttrtibutes(
      _charClass: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerNewCharacter(
      _tokenId: BigNumberish,
      _charClass: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_CharacterAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_StartingAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_fantasyCharacters(overrides?: CallOverrides): Promise<BigNumber>;

    s_fantasyCharactersAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getLevel(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayer(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerAbilities(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStartingAttrtibutes(
      _charClass: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerNewCharacter(
      _tokenId: BigNumberish,
      _charClass: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_CharacterAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_StartingAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_fantasyCharacters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_fantasyCharactersAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
