/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type AbilityStruct = {
  abilityType: BigNumberish;
  action: BigNumberish;
  name: string;
};

export type AbilityStructOutput = [number, number, string] & {
  abilityType: number;
  action: number;
  name: string;
};

export type CampaignAttributesStruct = {
  health: BigNumberish;
  strength: BigNumberish;
  armor: BigNumberish;
  physicalblock: BigNumberish;
  agility: BigNumberish;
  spellpower: BigNumberish;
  spellresistance: BigNumberish;
  healingpower: BigNumberish;
  class: BigNumberish;
  abilities: AbilityStruct[];
};

export type CampaignAttributesStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  AbilityStructOutput[]
] & {
  health: number;
  strength: number;
  armor: number;
  physicalblock: number;
  agility: number;
  spellpower: number;
  spellresistance: number;
  healingpower: number;
  class: number;
  abilities: AbilityStructOutput[];
};

export type ItemStruct = {
  item: BigNumberish;
  attr: BigNumberish;
  power: BigNumberish;
  numUses: BigNumberish;
  name: string;
};

export type ItemStructOutput = [number, number, number, number, string] & {
  item: number;
  attr: number;
  power: number;
  numUses: number;
  name: string;
};

export type MobStruct = {
  health: BigNumberish;
  strength: BigNumberish;
  armor: BigNumberish;
  physicalblock: BigNumberish;
  agility: BigNumberish;
  spellpower: BigNumberish;
  spellresistance: BigNumberish;
  healingpower: BigNumberish;
  spawnRate: BigNumberish;
  name: string;
  abilities: AbilityStruct[];
};

export type MobStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  string,
  AbilityStructOutput[]
] & {
  health: number;
  strength: number;
  armor: number;
  physicalblock: number;
  agility: number;
  spellpower: number;
  spellresistance: number;
  healingpower: number;
  spawnRate: number;
  name: string;
  abilities: AbilityStructOutput[];
};

export interface CastleCampaignInterface extends ethers.utils.Interface {
  functions: {
    "CampaignItems(uint256)": FunctionFragment;
    "abandonCampaign(uint256)": FunctionFragment;
    "applyItemSpell(uint256,uint256)": FunctionFragment;
    "attackWithAbility(uint256,uint256,uint256)": FunctionFragment;
    "attackWithItem(uint256,uint256,uint256)": FunctionFragment;
    "attributesManager()": FunctionFragment;
    "baseHealth(uint256)": FunctionFragment;
    "bossFightAvailable(uint256)": FunctionFragment;
    "campaignInventory(uint256,uint256,uint256)": FunctionFragment;
    "castHealAbility(uint256,uint256)": FunctionFragment;
    "characterPower(uint256,uint8)": FunctionFragment;
    "combatGuaranteedMobIds(uint256,uint256)": FunctionFragment;
    "combatTurnToMobs(uint256,uint256,uint256,uint256)": FunctionFragment;
    "endExploreLoot(uint256)": FunctionFragment;
    "enterCampaign(uint256)": FunctionFragment;
    "fantasyCharacters()": FunctionFragment;
    "fee()": FunctionFragment;
    "generateTurn(uint256)": FunctionFragment;
    "getCurrentCampaignStats(uint256)": FunctionFragment;
    "getInventory(uint256)": FunctionFragment;
    "getMobsForTurn(uint256,uint256)": FunctionFragment;
    "iceLance()": FunctionFragment;
    "keyHash()": FunctionFragment;
    "lootGuaranteedItemIds(uint256,uint256)": FunctionFragment;
    "mobAttributes(uint256)": FunctionFragment;
    "mobIndexAlive(uint256,uint256,uint256)": FunctionFragment;
    "numberOfTurns()": FunctionFragment;
    "playerNonce(uint256)": FunctionFragment;
    "playerStatus(uint256,uint256)": FunctionFragment;
    "playerTurn(uint256)": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "scrollOfProtection()": FunctionFragment;
    "scrollOfSpellpower()": FunctionFragment;
    "scrollOfStrength()": FunctionFragment;
    "turnGuaranteedTypes(uint256)": FunctionFragment;
    "turnInProgress(uint256)": FunctionFragment;
    "turnNumMobsAlive(uint256,uint256)": FunctionFragment;
    "turnTypes(uint256,uint256)": FunctionFragment;
    "unlockFinalTurn(uint256,uint256[2],uint256[2][2],uint256[2],uint256[2])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CampaignItems",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "abandonCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyItemSpell",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attackWithAbility",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attackWithItem",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attributesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bossFightAvailable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignInventory",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castHealAbility",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "characterPower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "combatGuaranteedMobIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "combatTurnToMobs",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endExploreLoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fantasyCharacters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generateTurn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCampaignStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInventory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMobsForTurn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "iceLance", values?: undefined): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lootGuaranteedItemIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mobAttributes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mobIndexAlive",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfTurns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerTurn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scrollOfProtection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scrollOfSpellpower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scrollOfStrength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turnGuaranteedTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "turnInProgress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "turnNumMobsAlive",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "turnTypes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFinalTurn",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "CampaignItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "abandonCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyItemSpell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attackWithAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attackWithItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attributesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseHealth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bossFightAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castHealAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "characterPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combatGuaranteedMobIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combatTurnToMobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endExploreLoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fantasyCharacters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateTurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCampaignStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMobsForTurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "iceLance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lootGuaranteedItemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mobAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mobIndexAlive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTurns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerTurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scrollOfProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scrollOfSpellpower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scrollOfStrength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turnGuaranteedTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turnInProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turnNumMobsAlive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "turnTypes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockFinalTurn",
    data: BytesLike
  ): Result;

  events: {
    "CampaignEnded(uint256,bool)": EventFragment;
    "CampaignStarted(uint256)": EventFragment;
    "CombatSequence(uint256,uint8)": EventFragment;
    "TurnCompleted(uint256)": EventFragment;
    "TurnSet(uint256)": EventFragment;
    "TurnStarted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CombatSequence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TurnCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TurnSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TurnStarted"): EventFragment;
}

export type CampaignEndedEvent = TypedEvent<
  [BigNumber, boolean],
  { _tokenId: BigNumber; _success: boolean }
>;

export type CampaignEndedEventFilter = TypedEventFilter<CampaignEndedEvent>;

export type CampaignStartedEvent = TypedEvent<
  [BigNumber],
  { _tokenId: BigNumber }
>;

export type CampaignStartedEventFilter = TypedEventFilter<CampaignStartedEvent>;

export type CombatSequenceEvent = TypedEvent<
  [BigNumber, number],
  { _tokenId: BigNumber; _damageDone: number }
>;

export type CombatSequenceEventFilter = TypedEventFilter<CombatSequenceEvent>;

export type TurnCompletedEvent = TypedEvent<
  [BigNumber],
  { _tokenId: BigNumber }
>;

export type TurnCompletedEventFilter = TypedEventFilter<TurnCompletedEvent>;

export type TurnSetEvent = TypedEvent<[BigNumber], { _tokenId: BigNumber }>;

export type TurnSetEventFilter = TypedEventFilter<TurnSetEvent>;

export type TurnStartedEvent = TypedEvent<[BigNumber], { _tokenId: BigNumber }>;

export type TurnStartedEventFilter = TypedEventFilter<TurnStartedEvent>;

export interface CastleCampaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CastleCampaignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CampaignItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    abandonCampaign(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyItemSpell(
      _tokenId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attackWithAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      _target: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attackWithItem(
      _tokenId: BigNumberish,
      _itemId: BigNumberish,
      _target: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attributesManager(overrides?: CallOverrides): Promise<[string]>;

    baseHealth(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    bossFightAvailable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    campaignInventory(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    castHealAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    characterPower(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    combatGuaranteedMobIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    combatTurnToMobs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        string
      ] & {
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        spawnRate: number;
        name: string;
      }
    >;

    endExploreLoot(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterCampaign(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fantasyCharacters(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    generateTurn(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentCampaignStats(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CampaignAttributesStructOutput]>;

    getInventory(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ItemStructOutput[]]>;

    getMobsForTurn(
      _tokenId: BigNumberish,
      _turnNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MobStructOutput[]]>;

    iceLance(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    keyHash(overrides?: CallOverrides): Promise<[string]>;

    lootGuaranteedItemIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mobAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        string
      ] & {
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        spawnRate: number;
        name: string;
      }
    >;

    mobIndexAlive(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numberOfTurns(overrides?: CallOverrides): Promise<[BigNumber]>;

    playerNonce(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playerStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        class: number;
      }
    >;

    playerTurn(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scrollOfProtection(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfSpellpower(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfStrength(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    turnGuaranteedTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    turnInProgress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    turnNumMobsAlive(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    turnTypes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    unlockFinalTurn(
      _tokenId: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CampaignItems(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  abandonCampaign(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyItemSpell(
    _tokenId: BigNumberish,
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attackWithAbility(
    _tokenId: BigNumberish,
    _abilityIndex: BigNumberish,
    _target: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attackWithItem(
    _tokenId: BigNumberish,
    _itemId: BigNumberish,
    _target: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attributesManager(overrides?: CallOverrides): Promise<string>;

  baseHealth(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  bossFightAvailable(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  campaignInventory(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  castHealAbility(
    _tokenId: BigNumberish,
    _abilityIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  characterPower(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  combatGuaranteedMobIds(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  combatTurnToMobs(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      string
    ] & {
      health: number;
      strength: number;
      armor: number;
      physicalblock: number;
      agility: number;
      spellpower: number;
      spellresistance: number;
      healingpower: number;
      spawnRate: number;
      name: string;
    }
  >;

  endExploreLoot(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterCampaign(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fantasyCharacters(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  generateTurn(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentCampaignStats(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CampaignAttributesStructOutput>;

  getInventory(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ItemStructOutput[]>;

  getMobsForTurn(
    _tokenId: BigNumberish,
    _turnNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MobStructOutput[]>;

  iceLance(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  keyHash(overrides?: CallOverrides): Promise<string>;

  lootGuaranteedItemIds(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mobAttributes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      string
    ] & {
      health: number;
      strength: number;
      armor: number;
      physicalblock: number;
      agility: number;
      spellpower: number;
      spellresistance: number;
      healingpower: number;
      spawnRate: number;
      name: string;
    }
  >;

  mobIndexAlive(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numberOfTurns(overrides?: CallOverrides): Promise<BigNumber>;

  playerNonce(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  playerStatus(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, number, number, number, number] & {
      health: number;
      strength: number;
      armor: number;
      physicalblock: number;
      agility: number;
      spellpower: number;
      spellresistance: number;
      healingpower: number;
      class: number;
    }
  >;

  playerTurn(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scrollOfProtection(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  scrollOfSpellpower(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  scrollOfStrength(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      item: number;
      attr: number;
      power: number;
      numUses: number;
      name: string;
    }
  >;

  turnGuaranteedTypes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  turnInProgress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  turnNumMobsAlive(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  turnTypes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  unlockFinalTurn(
    _tokenId: BigNumberish,
    a: [BigNumberish, BigNumberish],
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c: [BigNumberish, BigNumberish],
    input: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CampaignItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    abandonCampaign(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    applyItemSpell(
      _tokenId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attackWithAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      _target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attackWithItem(
      _tokenId: BigNumberish,
      _itemId: BigNumberish,
      _target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attributesManager(overrides?: CallOverrides): Promise<string>;

    baseHealth(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    bossFightAvailable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    campaignInventory(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    castHealAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    characterPower(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    combatGuaranteedMobIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combatTurnToMobs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        string
      ] & {
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        spawnRate: number;
        name: string;
      }
    >;

    endExploreLoot(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterCampaign(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fantasyCharacters(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    generateTurn(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentCampaignStats(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CampaignAttributesStructOutput>;

    getInventory(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ItemStructOutput[]>;

    getMobsForTurn(
      _tokenId: BigNumberish,
      _turnNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MobStructOutput[]>;

    iceLance(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    keyHash(overrides?: CallOverrides): Promise<string>;

    lootGuaranteedItemIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mobAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        string
      ] & {
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        spawnRate: number;
        name: string;
      }
    >;

    mobIndexAlive(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numberOfTurns(overrides?: CallOverrides): Promise<BigNumber>;

    playerNonce(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        health: number;
        strength: number;
        armor: number;
        physicalblock: number;
        agility: number;
        spellpower: number;
        spellresistance: number;
        healingpower: number;
        class: number;
      }
    >;

    playerTurn(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    scrollOfProtection(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfSpellpower(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    scrollOfStrength(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        item: number;
        attr: number;
        power: number;
        numUses: number;
        name: string;
      }
    >;

    turnGuaranteedTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    turnInProgress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    turnNumMobsAlive(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turnTypes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    unlockFinalTurn(
      _tokenId: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CampaignEnded(uint256,bool)"(
      _tokenId?: BigNumberish | null,
      _success?: null
    ): CampaignEndedEventFilter;
    CampaignEnded(
      _tokenId?: BigNumberish | null,
      _success?: null
    ): CampaignEndedEventFilter;

    "CampaignStarted(uint256)"(
      _tokenId?: BigNumberish | null
    ): CampaignStartedEventFilter;
    CampaignStarted(_tokenId?: BigNumberish | null): CampaignStartedEventFilter;

    "CombatSequence(uint256,uint8)"(
      _tokenId?: BigNumberish | null,
      _damageDone?: BigNumberish | null
    ): CombatSequenceEventFilter;
    CombatSequence(
      _tokenId?: BigNumberish | null,
      _damageDone?: BigNumberish | null
    ): CombatSequenceEventFilter;

    "TurnCompleted(uint256)"(
      _tokenId?: BigNumberish | null
    ): TurnCompletedEventFilter;
    TurnCompleted(_tokenId?: BigNumberish | null): TurnCompletedEventFilter;

    "TurnSet(uint256)"(_tokenId?: BigNumberish | null): TurnSetEventFilter;
    TurnSet(_tokenId?: BigNumberish | null): TurnSetEventFilter;

    "TurnStarted(uint256)"(
      _tokenId?: BigNumberish | null
    ): TurnStartedEventFilter;
    TurnStarted(_tokenId?: BigNumberish | null): TurnStartedEventFilter;
  };

  estimateGas: {
    CampaignItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    abandonCampaign(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyItemSpell(
      _tokenId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attackWithAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      _target: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attackWithItem(
      _tokenId: BigNumberish,
      _itemId: BigNumberish,
      _target: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attributesManager(overrides?: CallOverrides): Promise<BigNumber>;

    baseHealth(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bossFightAvailable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignInventory(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castHealAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    characterPower(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combatGuaranteedMobIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combatTurnToMobs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endExploreLoot(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterCampaign(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fantasyCharacters(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    generateTurn(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentCampaignStats(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInventory(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMobsForTurn(
      _tokenId: BigNumberish,
      _turnNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iceLance(overrides?: CallOverrides): Promise<BigNumber>;

    keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    lootGuaranteedItemIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mobAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mobIndexAlive(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfTurns(overrides?: CallOverrides): Promise<BigNumber>;

    playerNonce(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerTurn(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scrollOfProtection(overrides?: CallOverrides): Promise<BigNumber>;

    scrollOfSpellpower(overrides?: CallOverrides): Promise<BigNumber>;

    scrollOfStrength(overrides?: CallOverrides): Promise<BigNumber>;

    turnGuaranteedTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turnInProgress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turnNumMobsAlive(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turnTypes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockFinalTurn(
      _tokenId: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CampaignItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    abandonCampaign(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyItemSpell(
      _tokenId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attackWithAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      _target: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attackWithItem(
      _tokenId: BigNumberish,
      _itemId: BigNumberish,
      _target: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attributesManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseHealth(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bossFightAvailable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignInventory(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castHealAbility(
      _tokenId: BigNumberish,
      _abilityIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    characterPower(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    combatGuaranteedMobIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    combatTurnToMobs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endExploreLoot(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterCampaign(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fantasyCharacters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generateTurn(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentCampaignStats(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInventory(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMobsForTurn(
      _tokenId: BigNumberish,
      _turnNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iceLance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lootGuaranteedItemIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mobAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mobIndexAlive(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfTurns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerNonce(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerTurn(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scrollOfProtection(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scrollOfSpellpower(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scrollOfStrength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    turnGuaranteedTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turnInProgress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turnNumMobsAlive(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turnTypes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockFinalTurn(
      _tokenId: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
